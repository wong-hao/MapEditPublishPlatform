            try
            {

                // 创建竖线要素
                IPoint startPoint = new PointClass();
                IPoint endPoint = new PointClass();
                startPoint.PutCoords(-30, -100); // 竖线起点坐标
                endPoint.PutCoords(-30, 100); // 竖线终点坐标

                IPolyline verticalLine = new PolylineClass();
                verticalLine.FromPoint = startPoint;
                verticalLine.ToPoint = endPoint;


                // 遍历要素并分割
                IFeatureCursor featureCursor2 = fc.Search(null, true);
                double featureTotalCount = fc.FeatureCount(null);
                double featureCount2 = 0;
                IFeature feature2 = featureCursor2.NextFeature();
                while (feature2 != null)
                {
                    featureCount2 ++;

                    IGeometry geometry = feature2.Shape;

                    IProximityOperator proximityOperator = verticalLine as IProximityOperator;
                    if (proximityOperator != null && proximityOperator.ReturnDistance(geometry) == 0)
                    {
                        MessageBox.Show("要素" + feature2.OID + "发生交叉");
                        ITopologicalOperator topoOperator = geometry as ITopologicalOperator;
                        if (topoOperator != null)
                        {
                            IGeometry leGeometry = null;
                            IGeometry riGeometry = null;

                            topoOperator.Cut(verticalLine, out leGeometry, out riGeometry);

                            if (leGeometry != null && riGeometry != null)
                            {
                                MessageBox.Show("要素" + feature2.OID + "发生切割");

                                IFeature newFeaturele = fc.CreateFeature();
                                newFeaturele.Shape = leGeometry;
                                newFeaturele.Store();

                                IFeature newFeatureri = fc.CreateFeature();
                                newFeatureri.Shape = riGeometry;
                                newFeatureri.Store();
                            }
                        }
                    }

                    feature2 = featureCursor2.NextFeature();

                    // 避免分割生成的要素继续被分割
                    if (featureCount2 >= featureTotalCount)
                    {
                        break;
                    }
                }
                System.Runtime.InteropServices.Marshal.ReleaseComObject(featureCursor2);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
                throw;
            }